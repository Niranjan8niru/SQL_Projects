DROP DATABASE IF EXISTS `Parks_and_Recreation`;
CREATE DATABASE `Parks_and_Recreation`;
USE `Parks_and_Recreation`;

CREATE TABLE employee_demographics (
  employee_id INT NOT NULL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  age INT,
  gender VARCHAR(10),
  birth_date DATE,
  PRIMARY KEY (employee_id)
);

CREATE TABLE employee_salary (
  employee_id INT NOT NULL,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  occupation VARCHAR(50),
  salary INT,
  dept_id INT
);


INSERT INTO employee_demographics (employee_id, first_name, last_name, age, gender, birth_date)
VALUES
(1,'Leslie', 'Knope', 44, 'Female','1979-09-25'),
(3,'Tom', 'Haverford', 36, 'Male', '1987-03-04'),
(4, 'April', 'Ludgate', 29, 'Female', '1994-03-27'),
(5, 'Jerry', 'Gergich', 61, 'Male', '1962-08-28'),
(6, 'Donna', 'Meagle', 46, 'Female', '1977-07-30'),
(7, 'Ann', 'Perkins', 35, 'Female', '1988-12-01'),
(8, 'Chris', 'Traeger', 43, 'Male', '1980-11-11'),
(9, 'Ben', 'Wyatt', 38, 'Male', '1985-07-26'),
(10, 'Andy', 'Dwyer', 34, 'Male', '1989-03-25'),
(11, 'Mark', 'Brendanawicz', 40, 'Male', '1983-06-14'),
(12, 'Craig', 'Middlebrooks', 37, 'Male', '1986-07-27');


INSERT INTO employee_salary (employee_id, first_name, last_name, occupation, salary, dept_id)
VALUES
(1, 'Leslie', 'Knope', 'Deputy Director of Parks and Recreation', 75000,1),
(2, 'Ron', 'Swanson', 'Director of Parks and Recreation', 70000,1),
(3, 'Tom', 'Haverford', 'Entrepreneur', 50000,1),
(4, 'April', 'Ludgate', 'Assistant to the Director of Parks and Recreation', 25000,1),
(5, 'Jerry', 'Gergich', 'Office Manager', 50000,1),
(6, 'Donna', 'Meagle', 'Office Manager', 60000,1),
(7, 'Ann', 'Perkins', 'Nurse', 55000,4),
(8, 'Chris', 'Traeger', 'City Manager', 90000,3),
(9, 'Ben', 'Wyatt', 'State Auditor', 70000,6),
(10, 'Andy', 'Dwyer', 'Shoe Shiner and Musician', 20000, NULL),
(11, 'Mark', 'Brendanawicz', 'City Planner', 57000, 3),
(12, 'Craig', 'Middlebrooks', 'Parks Director', 65000,1);



CREATE TABLE parks_departments (
  department_id INT NOT NULL AUTO_INCREMENT,
  department_name varchar(50) NOT NULL,
  PRIMARY KEY (department_id)
);

INSERT INTO parks_departments (department_name)
VALUES
('Parks and Recreation'),
('Animal Control'),
('Public Works'),
('Healthcare'),
('Library'),
('Finance');

-- Groupby
SELECT Gender , AVG(age), count(employee_id)FROM parks_and_recreation.employee_demographics
 Group by gender;
 
 SELECT * from parks_and_recreation.employee_demographics
 order by employee_id, age;
 
 -- LIMIT
  SELECT * from parks_and_recreation.employee_demographics
  order by age DESC LIMIT 3 ,1;
  
-- JOINS
  Select * from employee_demographics
  INNER JOIN employee_salary ON
  employee_demographics.employee_id=employee_salary.employee_id;

Select * from employee_demographics
  LEFT JOIN employee_salary ON
  employee_demographics.employee_id=employee_salary.employee_id;
  
  Select * from employee_demographics
  RIGHT JOIN employee_salary ON
  employee_demographics.employee_id=employee_salary.employee_id;
  
  Select * from employee_salary emp1 JOIN
  employee_salary emp2 ON
  emp1.employee_id+1=emp2.employee_id;
  
-- Unions
select first_name, last_name from employee_demographics
UNION
select first_name, last_name from employee_salary;

select first_name, last_name from employee_demographics
UNION ALL
select first_name, last_name from employee_salary;

select * from parks_and_recreation.employee_salary;

-- String Functions
select first_name, length(first_name) from parks_and_recreation.employee_salary;

select first_name, Lower(first_name), upper(first_name) from parks_and_recreation.employee_salary;

-- TRIM() Will remove white spaces
select TRIM(' abc  ') as TRIMMED_STRING;
select LTRIM(' abc  ') as TRIMMED_STRING;
select RTRIM(' abc  ') as TRIMMED_STRING;

-- LEFT and RIGHT
select first_name, LEFT(first_name,4), RIGHT(first_name, 2), SUBSTRING(first_name, 2,3)
 from parks_and_recreation.employee_salary;
 
 -- REPLACE()
 select first_name, replace(first_name, 'o','a') from parks_and_recreation.employee_salary;
 
 -- LOCATE()
  select first_name, LOCATE('An', first_name) from parks_and_recreation.employee_salary;
  
  -- CONCATE()
  select first_name, last_name, concat(first_name, " " , last_name) as Full_name from parks_and_recreation.employee_salary;
  
  
  -- CASE Statements
  Select first_name, last_name, concat(first_name, " " , last_name) as Full_name, salary,
  CASE
		WHEN salary>25000 THEN "Highly Paid"
        WHEN salary between 10000 and 25000 THEN "Normal"
       ELSE "Low" END as Pay_scale
     from parks_and_recreation.employee_salary;  

SELECT * FROM parks_and_recreation.employee_demographics;
-- Sub Queries

Select * from parks_and_recreation.employee_demographics
where employee_id in (Select employee_id from parks_and_recreation.employee_salary where dept_id=1);


Select  First_name, salary, (Select avg(salary) from parks_and_recreation.employee_salary) As AVG_Salary 
from parks_and_recreation.employee_salary ;

-- Window Functions

Select de.first_name,de.last_name,de.gender, sum(salary) over (partition by gender order by de.employee_id) as Rolling_sum 
from parks_and_recreation.employee_demographics de JOIN parks_and_recreation.employee_salary es ON
de.employee_id=es.employee_id;

Select de.first_name,de.last_name,de.gender,salary, 
row_number() over(partition by gender order by salary DESC) as ROW_NUM,
rank() over(partition by gender order by salary DESC) as 'RANK',
dense_rank() over(partition by gender order by salary DESC) as 'Dense RANK'
from parks_and_recreation.employee_demographics de JOIN parks_and_recreation.employee_salary es ON
de.employee_id=es.employee_id;

-- Temp tables
CREATE temporary table salry_50k
select * from parks_and_recreation.employee_salary
where salary>50000;

select * from salry_50k;

-- Stored procedures
  -- Stored procedures

CREATE PROCEDURE salaries()
select * from parks_and_recreation.employee_salary
where salary>50000;

call salaries;

DELIMITER $$
CREATE PROCEDURE salaries_1()
BEGIN
select * from parks_and_recreation.employee_salary
where salary>50000;
select * from parks_and_recreation.employee_salary
where salary>10000;
END $$
DELIMITER ;

call salaries_1()

DELIMITER $$
CREATE PROCEDURE salaries_2(p_employee_id INT)
BEGIN
select * from parks_and_recreation.employee_salary
where employee_id=p_employee_id;
END $$
DELIMITER ;

call salaries_2(10)

-- Triggers and Events

DELIMITER $$
CREATE TRIGGER insert_data
AFTER INSERT ON employee_salary
FOR EACH ROW
BEGIN
	INSERT INTO employee_demographics(employee_id,first_name,last_name)
    VALUES(NEW.employee_id,NEW.first_name,NEW.last_name);
END $$
DELIMITER ;


INSERT INTO parks_and_recreation.employee_salary (employee_id,first_name,last_name,occupation,salary,dept_id) 
values (13,'test_1','test_2','Business',55000,1);

select * from employee_salary;
select * from employee_demographics;

-- EVENTS
DELIMITER $$
CREATE EVENT delete_olddata
ON SCHEDULE EVERY 30 SECOND
DO
BEGIN
     delete from employee_demographics
     where age>60;
END $$
DELIMITER ;

-- It Shouls be on
SHOW VARIABLES LIKE 'event%';
